#!/usr/bin/env node

/**
 * Module dependencies.
 */
 var app = require('../app');
 var http = require('http');
 var express = require('express');

 var server = http.createServer(app);

 // app.set('port', process.env.PORT || '3000');
 if(app.get('env') !== 'development'){
   //app.set('port', process.env.PORT);
   server.listen(process.env.PORT);
 }else{
   console.log('in development section')
   //app.set('port', '3000');
   server.listen('3000');
 }
 var io = require('socket.io')(server)
 forceNew: true;

 app.use(express.static('client'));

 var debug = require('debug')('final:server');
//replacing http with models



/**
 * Get port from environment and store in Express.
 */

//changing the port definition to use app.set
//var port = normalizePort(process.env.PORT || '3000')









//app.set('port', port);



/**
 * Create HTTP server.
 */




io.sockets.on('connection', function(socket) {
  global.SOCKET = socket
  console.log('-----------a user connected-----------------------------------');
  socket.on('disconnect', function () {
    console.log('--------user disconnected');
    io.emit('message', "User disconnected");
  });

});

var models = require("../models");

///****///
///sequelize setup///
models.sequelize.sync().then(function () {
  var server = app.listen(app.get('port'), function() {
    debug('Express server listening on port ' + server.address().port);
  });
});


// server.listen(process.env.PORT || 3000, process.env.IP || "0.0.0.0", function() {
//   var addr = server.address();
//   console.log("Chat server running at", addr.address + ":" + addr.port);
// });
/**
 * Listen on provided port, on all network interfaces.
 */
//
// server.listen('3000');
// server.on('error', onError);
// server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
//
// function normalizePort(val) {
//   var port = parseInt(val, 10);
//
//   if (isNaN(port)) {
//     // named pipe
//     return val;
//   }
//
//   if (port >= 0) {
//     // port number
//     return port;
//   }
//
//   return false;
// }

/**
 * Event listener for HTTP server "error" event.
 */

// function onError(error) {
//   if (error.syscall !== 'listen') {
//     throw error;
//   }
//
//   var bind = typeof port === 'string'
//     ? 'Pipe ' + port
//     : 'Port ' + port;

//   // handle specific listen errors with friendly messages
//   switch (error.code) {
//     case 'EACCES':
//       console.error(bind + ' requires elevated privileges');
//       process.exit(1);
//       break;
//     case 'EADDRINUSE':
//       console.error(bind + ' is already in use');
//       process.exit(1);
//       break;
//     default:
//       throw error;
//   }
// }

/**
 * Event listener for HTTP server "listening" event.
 */
//
// function onListening() {
//   var addr = server.address();
//   var bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port;
//   debug('Listening on ' + bind);
// }
